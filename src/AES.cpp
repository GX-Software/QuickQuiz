#include "stdafx.h"
#include "aes.h"

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif

#define Nb					4						// 分组长度（word）

#ifdef AES_128
#define Nk					4						// 密钥长度（word）
#define Nr					10						// 加密轮数
#endif

#ifdef AES_192
#define Nk					6
#define Nr					12
#endif

#ifdef AES_256
#define Nk					8
#define Nr					14
#endif

#define GSIZE				(sizeof(word) * Nb)		// 分组大小
#define KSIZE				(sizeof(word) * Nk)		// 密码大小

static byte sbox[] =
{ /*  0    1    2    3    4    5    6    7    8    9    a    b    c    d    e    f */
	0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76, /*0*/
	0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0, /*1*/
	0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15, /*2*/
	0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75, /*3*/
	0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84, /*4*/
	0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf, /*5*/
	0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8, /*6*/
	0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2, /*7*/
	0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73, /*8*/
	0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb, /*9*/
	0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79, /*a*/
	0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08, /*b*/
	0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a, /*c*/
	0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e, /*d*/
	0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf, /*e*/
	0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16  /*f*/
};

static byte inv_sbox[] =
{ /*  0    1    2    3    4    5    6    7    8    9    a    b    c    d    e    f  */
	0x52,0x09,0x6a,0xd5,0x30,0x36,0xa5,0x38,0xbf,0x40,0xa3,0x9e,0x81,0xf3,0xd7,0xfb, /*0*/
	0x7c,0xe3,0x39,0x82,0x9b,0x2f,0xff,0x87,0x34,0x8e,0x43,0x44,0xc4,0xde,0xe9,0xcb, /*1*/
	0x54,0x7b,0x94,0x32,0xa6,0xc2,0x23,0x3d,0xee,0x4c,0x95,0x0b,0x42,0xfa,0xc3,0x4e, /*2*/
	0x08,0x2e,0xa1,0x66,0x28,0xd9,0x24,0xb2,0x76,0x5b,0xa2,0x49,0x6d,0x8b,0xd1,0x25, /*3*/
	0x72,0xf8,0xf6,0x64,0x86,0x68,0x98,0x16,0xd4,0xa4,0x5c,0xcc,0x5d,0x65,0xb6,0x92, /*4*/
	0x6c,0x70,0x48,0x50,0xfd,0xed,0xb9,0xda,0x5e,0x15,0x46,0x57,0xa7,0x8d,0x9d,0x84, /*5*/
	0x90,0xd8,0xab,0x00,0x8c,0xbc,0xd3,0x0a,0xf7,0xe4,0x58,0x05,0xb8,0xb3,0x45,0x06, /*6*/
	0xd0,0x2c,0x1e,0x8f,0xca,0x3f,0x0f,0x02,0xc1,0xaf,0xbd,0x03,0x01,0x13,0x8a,0x6b, /*7*/
	0x3a,0x91,0x11,0x41,0x4f,0x67,0xdc,0xea,0x97,0xf2,0xcf,0xce,0xf0,0xb4,0xe6,0x73, /*8*/
	0x96,0xac,0x74,0x22,0xe7,0xad,0x35,0x85,0xe2,0xf9,0x37,0xe8,0x1c,0x75,0xdf,0x6e, /*9*/
	0x47,0xf1,0x1a,0x71,0x1d,0x29,0xc5,0x89,0x6f,0xb7,0x62,0x0e,0xaa,0x18,0xbe,0x1b, /*a*/
	0xfc,0x56,0x3e,0x4b,0xc6,0xd2,0x79,0x20,0x9a,0xdb,0xc0,0xfe,0x78,0xcd,0x5a,0xf4, /*b*/
	0x1f,0xdd,0xa8,0x33,0x88,0x07,0xc7,0x31,0xb1,0x12,0x10,0x59,0x27,0x80,0xec,0x5f, /*c*/
	0x60,0x51,0x7f,0xa9,0x19,0xb5,0x4a,0x0d,0x2d,0xe5,0x7a,0x9f,0x93,0xc9,0x9c,0xef, /*d*/
	0xa0,0xe0,0x3b,0x4d,0xae,0x2a,0xf5,0xb0,0xc8,0xeb,0xbb,0x3c,0x83,0x53,0x99,0x61, /*e*/
	0x17,0x2b,0x04,0x7e,0xba,0x77,0xd6,0x26,0xe1,0x69,0x14,0x63,0x55,0x21,0x0c,0x7d  /*f*/
};

static byte table[] = {
	0x01, 0x03, 0x05, 0x0f, 0x11, 0x33, 0x55, 0xff, 0x1a, 0x2e, 0x72, 0x96, 0xa1, 0xf8, 0x13, 0x35,
	0x5f, 0xe1, 0x38, 0x48, 0xd8, 0x73, 0x95, 0xa4, 0xf7, 0x02, 0x06, 0x0a, 0x1e, 0x22, 0x66, 0xaa,
	0xe5, 0x34, 0x5c, 0xe4, 0x37, 0x59, 0xeb, 0x26, 0x6a, 0xbe, 0xd9, 0x70, 0x90, 0xab, 0xe6, 0x31,
	0x53, 0xf5, 0x04, 0x0c, 0x14, 0x3c, 0x44, 0xcc, 0x4f, 0xd1, 0x68, 0xb8, 0xd3, 0x6e, 0xb2, 0xcd,
	0x4c, 0xd4, 0x67, 0xa9, 0xe0, 0x3b, 0x4d, 0xd7, 0x62, 0xa6, 0xf1, 0x08, 0x18, 0x28, 0x78, 0x88,
	0x83, 0x9e, 0xb9, 0xd0, 0x6b, 0xbd, 0xdc, 0x7f, 0x81, 0x98, 0xb3, 0xce, 0x49, 0xdb, 0x76, 0x9a,
	0xb5, 0xc4, 0x57, 0xf9, 0x10, 0x30, 0x50, 0xf0, 0x0b, 0x1d, 0x27, 0x69, 0xbb, 0xd6, 0x61, 0xa3,
	0xfe, 0x19, 0x2b, 0x7d, 0x87, 0x92, 0xad, 0xec, 0x2f, 0x71, 0x93, 0xae, 0xe9, 0x20, 0x60, 0xa0,
	0xfb, 0x16, 0x3a, 0x4e, 0xd2, 0x6d, 0xb7, 0xc2, 0x5d, 0xe7, 0x32, 0x56, 0xfa, 0x15, 0x3f, 0x41,
	0xc3, 0x5e, 0xe2, 0x3d, 0x47, 0xc9, 0x40, 0xc0, 0x5b, 0xed, 0x2c, 0x74, 0x9c, 0xbf, 0xda, 0x75,
	0x9f, 0xba, 0xd5, 0x64, 0xac, 0xef, 0x2a, 0x7e, 0x82, 0x9d, 0xbc, 0xdf, 0x7a, 0x8e, 0x89, 0x80,
	0x9b, 0xb6, 0xc1, 0x58, 0xe8, 0x23, 0x65, 0xaf, 0xea, 0x25, 0x6f, 0xb1, 0xc8, 0x43, 0xc5, 0x54,
	0xfc, 0x1f, 0x21, 0x63, 0xa5, 0xf4, 0x07, 0x09, 0x1b, 0x2d, 0x77, 0x99, 0xb0, 0xcb, 0x46, 0xca,
	0x45, 0xcf, 0x4a, 0xde, 0x79, 0x8b, 0x86, 0x91, 0xa8, 0xe3, 0x3e, 0x42, 0xc6, 0x51, 0xf3, 0x0e,
	0x12, 0x36, 0x5a, 0xee, 0x29, 0x7b, 0x8d, 0x8c, 0x8f, 0x8a, 0x85, 0x94, 0xa7, 0xf2, 0x0d, 0x17,
	0x39, 0x4b, 0xdd, 0x7c, 0x84, 0x97, 0xa2, 0xfd, 0x1c, 0x24, 0x6c, 0xb4, 0xc7, 0x52, 0xf6
};

static byte arc_table[] = {		
	0x00, 0x00, 0x19, 0x01, 0x32, 0x02, 0x1a, 0xc6, 0x4b, 0xc7, 0x1b, 0x68, 0x33, 0xee, 0xdf, 0x03,
	0x64, 0x04, 0xe0, 0x0e, 0x34, 0x8d, 0x81, 0xef, 0x4c, 0x71, 0x08, 0xc8, 0xf8, 0x69, 0x1c, 0xc1,
	0x7d, 0xc2, 0x1d, 0xb5, 0xf9, 0xb9, 0x27, 0x6a, 0x4d, 0xe4, 0xa6, 0x72, 0x9a, 0xc9, 0x09, 0x78,
	0x65, 0x2f, 0x8a, 0x05, 0x21, 0x0f, 0xe1, 0x24, 0x12, 0xf0, 0x82, 0x45, 0x35, 0x93, 0xda, 0x8e,
	0x96, 0x8f, 0xdb, 0xbd, 0x36, 0xd0, 0xce, 0x94, 0x13, 0x5c, 0xd2, 0xf1, 0x40, 0x46, 0x83, 0x38,
	0x66, 0xdd, 0xfd, 0x30, 0xbf, 0x06, 0x8b, 0x62, 0xb3, 0x25, 0xe2, 0x98, 0x22, 0x88, 0x91, 0x10,
	0x7e, 0x6e, 0x48, 0xc3, 0xa3, 0xb6, 0x1e, 0x42, 0x3a, 0x6b, 0x28, 0x54, 0xfa, 0x85, 0x3d, 0xba,
	0x2b, 0x79, 0x0a, 0x15, 0x9b, 0x9f, 0x5e, 0xca, 0x4e, 0xd4, 0xac, 0xe5, 0xf3, 0x73, 0xa7, 0x57,
	0xaf, 0x58, 0xa8, 0x50, 0xf4, 0xea, 0xd6, 0x74, 0x4f, 0xae, 0xe9, 0xd5, 0xe7, 0xe6, 0xad, 0xe8,
	0x2c, 0xd7, 0x75, 0x7a, 0xeb, 0x16, 0x0b, 0xf5, 0x59, 0xcb, 0x5f, 0xb0, 0x9c, 0xa9, 0x51, 0xa0,
	0x7f, 0x0c, 0xf6, 0x6f, 0x17, 0xc4, 0x49, 0xec, 0xd8, 0x43, 0x1f, 0x2d, 0xa4, 0x76, 0x7b, 0xb7,
	0xcc, 0xbb, 0x3e, 0x5a, 0xfb, 0x60, 0xb1, 0x86, 0x3b, 0x52, 0xa1, 0x6c, 0xaa, 0x55, 0x29, 0x9d,
	0x97, 0xb2, 0x87, 0x90, 0x61, 0xbe, 0xdc, 0xfc, 0xbc, 0x95, 0xcf, 0xcd, 0x37, 0x3f, 0x5b, 0xd1,
	0x53, 0x39, 0x84, 0x3c, 0x41, 0xa2, 0x6d, 0x47, 0x14, 0x2a, 0x9e, 0x5d, 0x56, 0xf2, 0xd3, 0xab,
	0x44, 0x11, 0x92, 0xd9, 0x23, 0x20, 0x2e, 0x89, 0xb4, 0x7c, 0xb8, 0x26, 0x77, 0x99, 0xe3, 0xa5,
	0x67, 0x4a, 0xed, 0xde, 0xc5, 0x31, 0xfe, 0x18, 0x0d, 0x63, 0x8c, 0x80, 0xc0, 0xf7, 0x70, 0x07
};

static byte init_array[GSIZE] = {
	0xa5, 0xa5, 0xa5, 0xa5,
	0xc3, 0xc3, 0xc3, 0xc3,
	0x5a, 0x5a, 0x5a, 0x5a,
	0x3c, 0x3c, 0x3c, 0x3c
};

static word w32[Nb * (Nr + 1)] = {0};

static word AESFUNC SubWord(word w)
{
	word r = 0;
	int x = 0, y = 0;
	int i;

	for (i = 0; i < sizeof(word); i++)
	{
		y = w & 0xf;
		w >>= 4;
		x = w & 0xf;
		w >>= 4;

		r |= (sbox[x * 16 + y] << (i * 8));
	}
	return r;
}

static word AESFUNC RotWord(word w)
{
	word t = (w & 0xff000000) >> 24;
	return ((w << 8) | t);
}

static void AESFUNC SubBytes(byte state[GSIZE])
{
	int i;
	for (i = 0; i < 4 * Nb; i++)
	{
		int x = state[i] >> 4;
		int y = state[i] & 0xf;
		state[i] = sbox[x * 16 + y];
	}
}

static void AESFUNC ShiftRows(byte state[GSIZE])
{
	byte t;
	
	t = state[Nb];
	state[Nb] = state[Nb + 1];
	state[Nb + 1] = state[Nb + 2];
	state[Nb + 2] = state[Nb + 3];
	state[Nb + 3] = t;

	t = state[Nb * 2];
	state[Nb * 2] = state[Nb * 2 + 2];
	state[Nb * 2 + 2] = t;
	t = state[Nb * 2 + 1];
	state[Nb * 2 + 1] = state[Nb * 2 + 3];
	state[Nb * 2 + 3] = t;

	t = state[Nb * 3 + 3];
	state[Nb * 3 + 3] = state[Nb * 3 + 2];
	state[Nb * 3 + 2] = state[Nb * 3 + 1];
	state[Nb * 3 + 1] = state[Nb * 3];
	state[Nb * 3] = t;
}

static byte AESFUNC GFMul(byte a, byte b)
{
	if (!a || !b)
	{
		return 0;
	}
	return table[((int)arc_table[a] + (int)arc_table[b]) % 255];
}

static void AESFUNC MixColumns(byte state[GSIZE])
{
	byte t[Nb] = {0};
	int i;
	for (i = 0; i < Nb; i++)
	{
		t[0] = GFMul(0x02, state[i]) ^ GFMul(0x03, state[Nb + i]) ^ state[Nb * 2 + i] ^ state[Nb * 3 + i];
		t[1] = state[i] ^ GFMul(0x02, state[Nb + i]) ^ GFMul(0x03, state[Nb * 2 + i]) ^ state[Nb * 3 + i];
		t[2] = state[i] ^ state[Nb + i] ^ GFMul(0x02, state[Nb * 2 + i]) ^ GFMul(0x03, state[Nb * 3 + i]);
		t[3] = GFMul(0x03, state[i]) ^ state[Nb + i] ^ state[Nb * 2 + i] ^ GFMul(0x02, state[Nb * 3 + i]);

		state[i] = t[0];
		state[Nb + i] = t[1];
		state[Nb * 2 + i] = t[2];
		state[Nb * 3 + i] = t[3];
	}
}

static void AESFUNC AddRoundKey(byte state[GSIZE], int r)
{
	int i;
	byte w1, w2, w3, w4;
	for(i = 0; i < Nb; i++)
	{
		w1 = (byte)((w32[r * Nb + i] & 0xff000000) >> 24);
		w2 = (byte)((w32[r * Nb + i] & 0x00ff0000) >> 16);
		w3 = (byte)((w32[r * Nb + i] & 0x0000ff00) >> 8);
		w4 = (byte)((w32[r * Nb + i] & 0x000000ff));

		state[i] = state[i] ^ w1;
		state[i + Nb] = state[i + Nb] ^ w2;
		state[i + Nb * 2] = state[i + Nb * 2] ^ w3;
		state[i + Nb * 3] = state[i + Nb * 3] ^ w4;
	}
}

static void AESFUNC Cipher(byte in[GSIZE], byte out[GSIZE])
{
	byte state[GSIZE] = {0};
	int r = 0;
	memcpy(state, in, GSIZE);

	AddRoundKey(state, r);

	for (++r; r < Nr; ++r)
	{
		SubBytes(state);
		ShiftRows(state);
		MixColumns(state);
		AddRoundKey(state, r);
	}

	SubBytes(state);
	ShiftRows(state);
	AddRoundKey(state, r);
	memcpy(out, state, GSIZE);
}

static void AESFUNC InvShiftRows(byte state[GSIZE])
{
	byte t;
	
	t = state[Nb + 3];
	state[Nb + 3] = state[Nb + 2];
	state[Nb + 2] = state[Nb + 1];
	state[Nb + 1] = state[Nb];
	state[Nb] = t;
	
	t = state[Nb * 2];
	state[Nb * 2] = state[Nb * 2 + 2];
	state[Nb * 2 + 2] = t;
	t = state[Nb * 2 + 1];
	state[Nb * 2 + 1] = state[Nb * 2 + 3];
	state[Nb * 2 + 3] = t;
	
	t = state[Nb * 3];
	state[Nb * 3] = state[Nb * 3 + 1];
	state[Nb * 3 + 1] = state[Nb * 3 + 2];
	state[Nb * 3 + 2] = state[Nb * 3 + 3];
	state[Nb * 3 + 3] = t;
}

static void AESFUNC InvSubBytes(byte state[GSIZE])
{
	int i;
	for (i = 0; i < 4 * Nb; i++)
	{
		int x = state[i] >> 4;
		int y = state[i] & 0xf;
		state[i] = inv_sbox[x * 16 + y];
	}
}

static void AESFUNC InvMixColumns(byte state[GSIZE])
{
	byte t[Nb] = {0};
	int i;
	for (i = 0; i < Nb; i++)
	{
		t[0] = GFMul(0x0e, state[i]) ^ GFMul(0x0b, state[Nb + i]) ^ GFMul(0x0d, state[Nb * 2 + i]) ^ GFMul(0x09, state[Nb * 3 + i]);
		t[1] = GFMul(0x09, state[i]) ^ GFMul(0x0e, state[Nb + i]) ^ GFMul(0x0b, state[Nb * 2 + i]) ^ GFMul(0x0d, state[Nb * 3 + i]);
		t[2] = GFMul(0x0d, state[i]) ^ GFMul(0x09, state[Nb + i]) ^ GFMul(0x0e, state[Nb * 2 + i]) ^ GFMul(0x0b, state[Nb * 3 + i]);
		t[3] = GFMul(0x0b, state[i]) ^ GFMul(0x0d, state[Nb + i]) ^ GFMul(0x09, state[Nb * 2 + i]) ^ GFMul(0x0e, state[Nb * 3 + i]);
		
		state[i] = t[0];
		state[Nb + i] = t[1];
		state[Nb * 2 + i] = t[2];
		state[Nb * 3 + i] = t[3];
	}
}

static void AESFUNC InvCipher(byte in[GSIZE], byte out[GSIZE])
{
	byte state[GSIZE] = {0};
	int r = Nr;
	memcpy(state, in, GSIZE);
	
	AddRoundKey(state, r);
	
	for (--r; r > 0; --r)
	{
		InvShiftRows(state);
		InvSubBytes(state);
		AddRoundKey(state, r);
		InvMixColumns(state);
	}
	
	InvShiftRows(state);
	InvSubBytes(state);
	AddRoundKey(state, r);

	memcpy(out, state, GSIZE);
}

static size_t AESFUNC KeyExpansion(byte key[KSIZE])
{
	static byte rc[] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36};
	word tmp;
	size_t i = 0;
	
	for (; i < Nk; ++i)
	{
		w32[i] = (key[4 * i] << 24) +
				 (key[4 * i + 1] << 16) +
				 (key[4 * i + 2] << 8) +
				 key[4 * i + 3];
	}
	
	for (; i < Nb * (Nr + 1); ++i)
	{
		tmp = w32[i - 1];
		if (!(i % Nk))
		{
			tmp = SubWord(RotWord(tmp)) ^ (rc[i / Nk - 1] << 24);
		}
		else if (Nk > 6 && i % Nk == 4)
		{
			tmp = SubWord(tmp);
		}
		
		w32[i] = w32[i - Nk] ^ tmp;
	}
	
	return i;
}

int AESFUNC AES_SetKey(byte *key, size_t size)
{
	int r = AES_OK;
	byte k[KSIZE] = {0};
	if (!size || size > KSIZE)
	{
		return AES_KEYERROR;
	}

	memcpy(k, key, size);
	// 如果长度不够，则重复密码
	if (size < KSIZE)
	{
		size_t i = size, l = 0;
		while(i < KSIZE)
		{
			l = (i + size > KSIZE) ? (KSIZE - i) : size;
			memcpy(k + i, key, l);
			i += l;
		}
	}

	KeyExpansion(k);
	return AES_OK;
}

int AESFUNC AES_Encrypt_ECB(byte *in,
							size_t isize,
							byte *out,
							size_t *osize)
{
	size_t esize = (isize % GSIZE) ? (isize + GSIZE - isize % GSIZE) : isize;
	size_t l = 0;
	int r = AES_OK;

	if (!out)
	{
		*osize = esize;
		return AES_OK;
	}
	else if (*osize < esize)
	{
		r = AES_NOEND;
	}

	while(l + GSIZE <= *osize)
	{
		Cipher(in + l, out + l);
		l += GSIZE;
	}

	*osize = l;
	return r;
}

int AESFUNC AES_Decrypt_ECB(byte *in,
							size_t isize,
							byte *out,
							size_t *osize)
{
	size_t esize = (isize % GSIZE) ? (isize + GSIZE - isize % GSIZE) : isize;
	size_t l = 0;
	int r = AES_OK;
	
	if (!out)
	{
		*osize = esize;
		return AES_OK;
	}
	else if (*osize < esize)
	{
		r = AES_NOEND;
	}
	
	while(l + GSIZE <= *osize)
	{
		InvCipher(in + l, out + l);
		l += GSIZE;
	}
	
	*osize = l;
	return r;
}

int AESFUNC AES_Encrypt_CBC(byte *in,
							size_t isize,
							byte *out,
							size_t *osize)
{
	static byte cbc[GSIZE] = {0};
	size_t esize = (isize % GSIZE) ? (isize + GSIZE - isize % GSIZE) : isize;
	size_t l = 0;
	int r = AES_OK;
	
	if (!out)
	{
		*osize = esize;
		return AES_OK;
	}
	else if (*osize < esize)
	{
		r = AES_NOEND;
	}
	
	memcpy(cbc, init_array, sizeof(init_array));
	while(l + GSIZE <= *osize)
	{
		int i;
		for (i = 0; i < GSIZE; i++)
		{
			cbc[i] ^= in[l + i];
		}
		Cipher(cbc, out + l);
		memcpy(cbc, out + l, sizeof(cbc));
		l += GSIZE;
	}
	
	*osize = l;
	return r;
}

int AESFUNC AES_Decrypt_CBC(byte *in,
							size_t isize,
							byte *out,
							size_t *osize)
{
	static byte cbc[GSIZE] = {0};
	size_t esize = (isize % GSIZE) ? (isize + GSIZE - isize % GSIZE) : isize;
	size_t l = 0;
	int r = AES_OK;
	
	if (!out)
	{
		*osize = esize;
		return AES_OK;
	}
	else if (*osize < esize)
	{
		r = AES_NOEND;
	}
	
	memcpy(cbc, init_array, sizeof(init_array));
	while(l + GSIZE <= *osize)
	{
		int i;
		InvCipher(in + l, out + l);
		for (i = 0; i < GSIZE; i++)
		{
			out[l + i] ^= cbc[i];
		}
		memcpy(cbc, in + l, sizeof(cbc));
		l += GSIZE;
	}
	
	*osize = l;
	return r;
}
